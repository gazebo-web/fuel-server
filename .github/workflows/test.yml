name: Test
on:
  push:
    branches: [ $default-branch ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '1.14', '1.15', '1.16', '1.17', '1.18', '1.19', '1.20' ]
    env:
      IGN_DB_USERNAME: gazebo
      IGN_DB_PASSWORD: 1234
      IGN_DB_NAME: gazebo_db
      IGN_DB_MAX_OPEN_CONNS: 66
    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306
        env:
          MYSQL_USER: ${{ env.IGN_DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.IGN_DB_PASSWORD }}
          MYSQL_DATABASE: "${{env.IGN_DB_NAME}}_test"
          MYSQL_RANDOM_ROOT_PASSWORD: true
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify MySQL connection
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
            sleep 1
          done

      - name: Install zip
        run: |
          sudo apt-get install -y zip 

      - name: Install git
        run: |
          sudo apt-get install -y git
          git --version
          git config --global user.name "gz-fuelserver"
          git config --global user.email "gz-fuelserver@test.org"

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.version }}

      - name: Test
        env:
          AWS_BUCKET_PREFIX_TEST: "myFuelServer-tests-"
          AWS_BUCKET_USE_IN_TESTS: "false"
          AWS_DEFAULT_REGION: "us-east-1"
          S3_BUCKET: "gz-fuel-srv"

          IGN_DB_ADDRESS: "127.0.0.1:${{ job.services.mysql.ports[3306] }}"
          IGN_FUEL_RESOURCE_DIR: "./tmp/fuel"
          IGN_TEST_JWT: ${{ secrets.IGN_TEST_JWT }}
          IGN_FUEL_MIGRATE_UNIQUEOWNERS_TABLE: "false"
          IGN_POPULATE_PATH: ./.gazebo/models/

          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}

          TEST_RSA256_PUBLIC_KEY: ${{ secrets.TEST_RSA256_PUBLIC_KEY }}
          TOKEN_GENERATOR_PRIVATE_RSA256_KEY: ${{ secrets.TOKEN_GENERATOR_PRIVATE_RSA256_KEY }}


        run: |
          go test -covermode=atomic -coverprofile=coverage.tx -v ./...
          go tool cover -func=coverage.tx -o=coverage.out
